#include<iostream>
#include<vector>
#include<cmath>
using namespace std;

int n, answer = 999999; // 선수 수, 최소 값 선언 (최소값은 추후 비교해야하므로 큰수로 초기화)
int MAP[20][20]; // 좌표로 나타내기 위해 2차원 배열 선언 
bool Select[20]; // 선수 팀배정 등을 위해 선택되었는 지 여부를 확인하는 함수 선언 

//최소 시너지 값을 구해야 하므로 min함수 선언 
int Min(int a, int b) { 
	if (a < b) {
		return a;		
	}
	return b;
}

//n * n 좌표 입력 받기 
void Input() {
	cin >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> MAP[i][j];
		}
	}
}

// 시너지 값 합산 하는 함수 
int Calculate_synergy(vector<int> v) { // 벡터 배열의 사이즈만큼 돌기 위해 
	int sum = 0;
	for (int i = 0; i < v.size(); i++) {
		for (int j = 0; j < v.size(); j++) {
			if (i == j) { // i=j일경우는 값이 0이기 때문에 
				continue;
			}
			sum = sum + MAP[v.at(i)][v.at(j)]; // v 배열에서 i, j일경우의 값을 받아와 좌표로 넘겨줌. 
		}
	}
	return sum; 
}

//각 팀의 값을 벡터로 넘겨주는 함수 
void Calculate() {
	vector<int> Link, Start;

	for (int i = 0; i < n; i++) {
		if (Select[i] == true) { // 선택된 선수를 LINK, 선택되지 않은 선수를 Start로 가정  (0~n-1)
			Link.push_back(i); // link로 push 
		}
		else
			Start.push_back(i); // start로 push 
	}

	int Synergy_link = Calculate_synergy(Link); // link 끼리의 시너지 값 계산
	int Synergy_start = Calculate_synergy(Start); // start 끼리의 시너지 값 계산 
	int Diff = abs(Synergy_link - Synergy_start); // 둘의 차이 계산
	answer = Min(answer, Diff); // 최소값 산출하는 함수를 통해 계속 비교 
}

//팀배정 
void Divide_Team(int idx, int cnt) {
	if (cnt == n / 2) { // 절반만 선택되어도 팀이 나뉘므로
		Calculate(); // 최소 값 계산 
		return;
	}
	for (int i = idx; i < n; i++) {
		if (Select[i] == true) { 
			continue;
		}
		Select[i] = true; // select가 참이 아니면 
		Divide_Team(i, cnt + 1); //제귀 함수 (이미 선택된 선수들은 제외하기 위해 i로 인수 전달)
		Select[i] = false; // 가능한 모든 팀의 구성을 뽑아내야 하므로 
	}
}


void solution() {
	Divide_Team(0, 0);
	cout << answer << "\n";
}
void Solve() {
	Input();
	solution();
}

int main() {
	Solve();
	return 0; 
}

